#!/usr/bin/env bash

# This is the example configuration file for river.
#
# See the river(1), riverctl(1), and rivertile(1) man pages for complete
# documentation.

# Use the "logo" key as the primary modifier
mod="Mod4"

apps=(
    "kanshi"
    "waybar"
    "swayosd-server"
    "swaync"
    "nm-applet --indicator"
    # "wpaperd"
)
# waybar # "swayidle -w before-sleep 'gtklock -d'")

for app in "${apps[@]}"; do
    pkill -f "$app"
    riverctl spawn "$app" 
done

riverctl map normal $mod Return spawn "$TERMINAL"

riverctl map normal $mod v spawn 'pavucontrol'
riverctl map normal $mod n spawn "swaync-client -t"

riverctl map normal $mod+Shift Q spawn 'menu-system'

# reload river
riverctl map normal $mod r spawn "sh ~/.config/river/reload"

riverctl spawn "dbus-update-activation-environment SEATD_SOCK DISPLAY WAYLAND _DISPLAY XDG_CURRENT_DESKTOP=river"

# close the focused view
riverctl map normal $mod Q close

# launcher
riverctl map normal $mod p spawn "bemenu-run"

riverctl keyboard-layout -model pc105 -variant '' -options caps:escape es
# riverctl keyboard-layout -model pc105 -variant altgr-intl -options caps:escape us

# manual network-tray
# reason being - when spawned, cmst/applet fails to identify the sys-tray's presence
riverctl map normal $mod+Shift c spawn "cmst -m"

#  exit river
riverctl map normal $mod+Shift E spawn "bash ~/.config/wofi/leave/leave.sh"

# Mod+J and Mod+K to focus the next/previous view in the layout stack
riverctl map normal $mod J focus-view next
riverctl map normal $mod K focus-view previous

# Mod+Shift+J and Mod+Shift+K to swap the focused view with the next/previous
# view in the layout stack
riverctl map normal $mod+Shift J swap next
riverctl map normal $mod+Shift K swap previous

# Mod+Period and Mod+Comma to focus the next/previous output
riverctl map normal $mod Period focus-output next
riverctl map normal $mod Comma focus-output previous

# Mod+Shift+{Period,Comma} to send the focused view to the next/previous output
riverctl map normal $mod+Shift Period send-to-output next
riverctl map normal $mod+Shift Comma send-to-output previous

# Mod+Return to bump the focused view to the top of the layout stack
riverctl map normal $mod+Shift Return zoom

# Mod+H and Mod+L to decrease/increase the main ratio of rivertile(1)
riverctl map normal $mod H send-layout-cmd rivertile "main-ratio -0.05"
riverctl map normal $mod L send-layout-cmd rivertile "main-ratio +0.05"

# Mod+Shift+H and Mod+Shift+L to increment/decrement the main count of rivertile(1)
riverctl map normal $mod+Shift H send-layout-cmd rivertile "main-count +1"
riverctl map normal $mod+Shift L send-layout-cmd rivertile "main-count -1"

# Mod+Alt+{H,J,K,L} to move views
riverctl map normal $mod+Mod1 H move left 100
riverctl map normal $mod+Mod1 J move down 100
riverctl map normal $mod+Mod1 K move up 100
riverctl map normal $mod+Mod1 L move right 100

# Mod+Alt+Control+{H,J,K,L} to snap views to screen edges
riverctl map normal $mod+Mod1+Control H snap left
riverctl map normal $mod+Mod1+Control J snap down
riverctl map normal $mod+Mod1+Control K snap up
riverctl map normal $mod+Mod1+Control L snap right

# Mod+Alt+Shif+{H,J,K,L} to resize views
riverctl map normal $mod+Mod1+Shift H resize horizontal -100
riverctl map normal $mod+Mod1+Shift J resize vertical 100
riverctl map normal $mod+Mod1+Shift K resize vertical -100
riverctl map normal $mod+Mod1+Shift L resize horizontal 100

# Mod + Left Mouse Button to move views
riverctl map-pointer normal $mod BTN_LEFT move-view

# Mod + Right Mouse Button to resize views
riverctl map-pointer normal $mod BTN_RIGHT resize-view

for i in $(seq 1 9)
do
    tags=$((1 << ($i - 1)))

    # Mod+[1-9] to focus tag [0-8]
    riverctl map normal $mod $i set-focused-tags $tags

    # Mod+Shift+[1-9] to tag focused view with tag [0-8]
    riverctl map normal $mod+Shift $i set-view-tags $tags

    # Mod+Ctrl+[1-9] to toggle focus of tag [0-8]
    riverctl map normal $mod+Control $i toggle-focused-tags $tags

    # Mod+Shift+Ctrl+[1-9] to toggle tag [0-8] of focused view
    riverctl map normal $mod+Shift+Control $i toggle-view-tags $tags
done

riverctl map normal $mod Tab focus-previous-tags

# Mod+0 to focus all tags
# Mod+Shift+0 to tag focused view with all tags
all_tags=$(((1 << 32) - 1))
riverctl map normal $mod 0 set-focused-tags $all_tags
riverctl map normal $mod+Shift 0 set-view-tags $all_tags

# Mod+Space to toggle float
riverctl map normal $mod Space toggle-float

# Mod+F to toggle fullscreen
riverctl map normal $mod F toggle-fullscreen

# Mod+{Up,Right,Down,Left} to change layout orientation
riverctl map normal $mod Up    send-layout-cmd rivertile "main-location top"
riverctl map normal $mod Right send-layout-cmd rivertile "main-location right"
riverctl map normal $mod Down  send-layout-cmd rivertile "main-location bottom"
riverctl map normal $mod Left  send-layout-cmd rivertile "main-location left"

# Declare a passthrough mode. This mode has only a single mapping to return to
# normal mode. This makes it useful for testing a nested wayland compositor
riverctl declare-mode passthrough

# Mod+F11 to enter passthrough mode
riverctl map normal $mod F10 enter-mode passthrough

# Mod+F11 to return to normal mode
riverctl map passthrough $mod F11 enter-mode normal

# The scratchpad will live on an unused tag. Which tags are used depends on your
# config, but rivers default uses the first 9 tags.
scratch_tag=$((1 << 20 ))

# Toggle the scratchpad with Super+S
riverctl map normal Mod4 S toggle-focused-tags ${scratch_tag}

# Send windows to the scratchpad with Super+Shift+P
riverctl map normal Mod4+Shift S set-view-tags ${scratch_tag}

# Set spawn tagmask to ensure new windows don't have the scratchpad tag unless
# explicitly set.
all_but_scratch_tag=$(( ((1 << 32) - 1) ^ $scratch_tag ))
riverctl spawn-tagmask ${all_but_scratch_tag}

# Various media key mapping examples for both normal and locked mode which do
# not have a modifier
for mode in normal locked
do
    # Eject the optical drive
    riverctl map $mode None XF86Eject spawn 'eject -T'

    riverctl map $mode None XF86AudioRaiseVolume  spawn 'swayosd-client --output-volume raise'
    riverctl map $mode None XF86AudioLowerVolume  spawn 'swayosd-client --output-volume lower'
    riverctl map $mode None XF86AudioMute         spawn 'swayosd-client --output-volume mute-toggle'

    riverctl map $mode None XF86AudioMedia spawn 'playerctl play-pause'
    riverctl map $mode None XF86AudioPlay  spawn 'playerctl play-pause'
    riverctl map $mode None XF86AudioPrev  spawn 'playerctl previous'
    riverctl map $mode None XF86AudioNext  spawn 'playerctl next'

    riverctl map $mode None XF86MonBrightnessUp   spawn 'swayosd-client --brightness raise'
    riverctl map $mode None XF86MonBrightnessDown spawn 'swayosd-client --brightness lower'

done

# Set background and border color
riverctl background-color 0x282828
# riverctl border-color-focused 0x92a58b
riverctl border-color-focused 0xBBBBBB

# Set repeat rate
# riverctl set-repeat 50 300

# Clipboard
# Note : Not auto-starting the copyq program

# Issue : Autostarting the app stops the show/hide feature working
# How to replicate? : Uncomment the below autostart exec command,
# in a new user session, launch the app, try to hide it and it won't work.
# Kill the app, then relaunch, now repeat and it works. 

# Solution : Don't auto-start it.
#riverctl spawn "copyq && copyq hide"

# Set app-ids of views which should float
# riverctl float-filter-add "float"
# riverctl float-filter-add "popup"

# Set app-ids of views which should use client side decorations
# riverctl csd-filter-add "firefox"
#riverctl csd-filter-add "gedit"
#riverctl csd-filter-add "emacs"

add_ssd_to=(
    "firefox"
    "org.pulseaudio.pavucontrol"
    "org.remmina.Remmina"
    "chromium-browser"
)
for app in "${add_ssd_to[@]}"; do
    riverctl rule-add -app-id "$app" ssd
done

float_apps=(
    "org.pulseaudio.pavucontrol"
)
for app in "${float_apps[@]}"; do
    riverctl rule-add -app-id "$app" float
done

riverctl rule-add -app-id 'float*' -title 'foo' float
# riverctl rule-add -app-id "bar" csd

# Set touchpad by grabbing the event
# The below for-loop was shared by Adarsh (github@theCode-Breaker)

for pad in $(riverctl list-inputs | grep -i touchpad )
do
  riverctl input $pad events enabled
  riverctl input $pad tap enabled
  riverctl input $pad disable-while-typing enabled
  riverctl input $pad natural-scroll enabled
done

for mouse in $(riverctl list-inputs | grep -i pointer )
do
  riverctl input $mouse accel-profile flat
  riverctl input $mouse pointer-accel 0.0
done

riverctl focus-follows-cursor normal

# riverctl hide-cursor timeout 5000

dbus-update-activation-environment \
    DISPLAY WAYLAND_DISPLAY XDG_CURRENT_DESKTOP NIXOS_OZONE_WL \
    MOZ_ENABLE_WAYLAND XDG_SESSION_DESKTOP XDG_SESSION_TYPE \
    XCURSOR_THEME XCURSOR_SIZE

# Set and exec into the default layout generator, rivertile.
# River will send the process group of the init executable SIGTERM on exit.

riverctl default-layout rivertile
exec rivertile

