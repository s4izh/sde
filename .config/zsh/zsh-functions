# Function to source files if they exist
function zsh_add_file() {
    [ -f "$ZDOTDIR/$1" ] && source "$ZDOTDIR/$1"
}

function zsh_add_plugin() {
    PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
    if [ -d "$ZDOTDIR/plugins/$PLUGIN_NAME" ]; then
        # For plugins
        zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh" || \
        zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.zsh"
    else
        git clone "https://github.com/$1.git" "$ZDOTDIR/plugins/$PLUGIN_NAME"
    fi
}

function zsh_add_completion() {
    PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
    if [ -d "$ZDOTDIR/plugins/$PLUGIN_NAME" ]; then
        # For completions
		completion_file_path=$(ls $ZDOTDIR/plugins/$PLUGIN_NAME/_*)
		fpath+="$(dirname "${completion_file_path}")"
        zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh"
    else
        git clone "https://github.com/$1.git" "$ZDOTDIR/plugins/$PLUGIN_NAME"
		fpath+=$(ls $ZDOTDIR/plugins/$PLUGIN_NAME/_*)
        [ -f $ZDOTDIR/.zccompdump ] && $ZDOTDIR/.zccompdump
    fi
	completion_file="$(basename "${completion_file_path}")"
	if [ "$2" = true ] && compinit "${completion_file:1}"
}

function man() {
      env \
      LESS_TERMCAP_mb=$'\e[01;31m' \
      LESS_TERMCAP_md=$'\e[01;31m' \
      LESS_TERMCAP_me=$'\e[0m' \
      LESS_TERMCAP_se=$'\e[0m' \
      LESS_TERMCAP_so=$'\e[01;44;33m' \
      LESS_TERMCAP_ue=$'\e[0m' \
      LESS_TERMCAP_us=$'\e[01;32m' \
      man "$@"
}

function fzf-lovely(){

	if ["$1" = "h"]; then
		fzf -m --reverse --preview-window down:20 --preview '[[ $(file --mime {}) =~ binary ]] &&
 	                echo {} is a binary file ||
	                 (bat --style=numbers --color=always {} ||
	                  highlight -O ansi -l {} ||
	                  coderay {} ||
	                  rougify {} ||
	                  cat {}) 2> /dev/null | head -500'

	else
	        fzf -m --preview '[[ $(file --mime {}) =~ binary ]] &&
	                         echo {} is a binary file ||
	                         (bat --style=numbers --color=always {} ||
	                          highlight -O ansi -l {} ||
	                          coderay {} ||
	                          rougify {} ||
	                          cat {}) 2> /dev/null | head -500'
	fi
}

function z() {
    zathura "$@" &
}

function uni() {
	cd ~/vault/uni/$1/
	ranger
}

function cdf() { cd "$(find -type d | fzf)" }

function openf() { xdg-open "$(find -type f | fzf)" }

function open() { xdg-open $1 & }

function se() {
    local current_dir=$PWD
    cd ~/.local/scripts/
    choice=$(fzf)
    # [ -z "$choice" ] && cd $current_dir && exit
    nvim $choice
    cd $current_dir
}

function ne() {
    local current_dir=$PWD
    cd ~/nixos
    choice=$(fzf)
    # [ -z "$choice" ] && cd $current_dir && exit
    nvim $choice
    cd $current_dir
}

function dwmc() {
    cd ~/.local/src/dwm
    sudo make clean install
}

function chedit() {
    nvim ~/.local/share/cheat/$1.sh
}

function vif() {
    local fname
    local current_dir=$PWD
    cd ~/.dotfiles
    fname=$(fzf) || return
    vim "$fname"
    cd $current_dir
}
# https://jdhao.github.io/2019/06/13/zsh_bind_keys/
# bindkey -s '^o' 'vif^M'

gd() {
  nvim -c ":Neogit"
}

wk() {
    cd ~/notes
    nvim --cmd "packloadall" -c "lua require('telescope.builtin').find_files({cwd = '.'})"
    # nvim $(fzf)
}

wks() {
    cd ~/notes
    nvim --cmd "packloadall" -c "lua require('telescope.builtin').live_grep({cwd = '.'})"
    # nvim $(fzf)
}

wo() {
    tmux-$1
}

fman() {
    man -k . | fzf -i | awk '{print $1}' | xargs -r man
}

# _edit_wo_executing() {
#     local editor="${EDITOR:-nano}"
#     tmpf="$(mktemp)"
#     printf '%s\n' "$READLINE_LINE" > "$tmpf"
#     "$editor" "$tmpf"
#     READLINE_LINE="$(<"$tmpf")"
#     READLINE_POINT="${#READLINE_LINE}"
#     rm -f "$tmpf"  # -f for those who have alias rm='rm -i'
# }

# bind -x '"\C-x\C-e":_edit_wo_executing'

# res () {
#   cd ~/notes/uni
#   choice=$(ls | fzf)
#   export ASIG=$choice
#   cd ~/notes
#   nvim uni/$choice/resumen.md
# }

function sshclone () {
  git clone git@github.com:$1
}

function copy_zeos_flake() {
  cp ~/code/zeos/{flake.nix,flake.lock} .
}
